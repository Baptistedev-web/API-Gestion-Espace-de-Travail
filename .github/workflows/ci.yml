name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: Symfony_EspaceTravailAPI_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    env:
      APP_ENV: test
      APP_SECRET: $ecretf0rt3st
      DATABASE_URL: mysql://root:root@127.0.0.1:3306/Symfony_EspaceTravailAPI
      JWT_SECRET_KEY: config/jwt/private.pem
      JWT_PUBLIC_KEY: config/jwt/public.pem
      JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, intl, pdo_mysql
          tools: composer, symfony

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Clear Symfony cache
        env:
          APP_ENV: test
        run: php bin/console cache:clear --env=test

      - name: Create database
        env:
          APP_ENV: test
        run: php bin/console doctrine:database:create --if-not-exists --env=test

      - name: Check for migrations
        run: |
          if [ -z "$(ls -A migrations/)" ]; then
            echo "No migrations found, skipping migration step.";
            exit 0;
          fi

      - name: Run database migrations
        env:
          APP_ENV: test
        run: php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: Load fixtures
        env:
          APP_ENV: test
        run: php bin/console doctrine:fixtures:load --no-interaction --env=test

      - name: Run tests with coverage
        env:
          APP_ENV: test
        run: |
          mkdir -p var/coverage
          php bin/phpunit --coverage-clover var/coverage/clover.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: var/coverage/clover.xml
          flags: unittests
          name: code-coverage
          token: ${{ secrets.CODECOV_TOKEN }}